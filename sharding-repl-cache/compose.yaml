version: '3'
name: sharding-repl-cache
services:

  # Конфигурационный сервер
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27019:27019" # Стандартный порт для config серверов
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command: [ "--configsvr", "--replSet", "config_server", "--bind_ip_all", "--port", "27019" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018" # Стандартный порт для shard-серверов
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_replica1:
    image: mongo:latest
    container_name: shard1_replica1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-replica1-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_replica2:
    image: mongo:latest
    container_name: shard1_replica2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-replica2-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_replica3:
    image: mongo:latest
    container_name: shard1_replica3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1-replica3-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis_shard1:
    image: redis:latest
    container_name: redis_shard1
    restart: always
    ports:
      - "63791:6379" # Порт Redis для первого шарда
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      start_period: 10s

  # 2-й шард
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27020:27020" # Используем тот же стандартный порт для всех shard-серверов
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27020" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_replica1:
    image: mongo:latest
    container_name: shard2_replica1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2-replica1-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27020" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_replica2:
    image: mongo:latest
    container_name: shard2_replica2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard2-replica2-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27020" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_replica3:
    image: mongo:latest
    container_name: shard2_replica3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2-replica3-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27020" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis_shard2:
    image: redis:latest
    container_name: redis_shard2
    restart: always
    ports:
      - "63792:6379" # Порт Redis для второго шарда
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      start_period: 10s

  # Роутер (mongos)
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27017:27017" # Стандартный порт для mongos роутера
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27019", # Подключение к конфиг-серверу на его стандартном порту 27019
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    depends_on:
      - configSrv
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # Приложение pymongo_api
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router # Зависимость от роутера
      - redis_shard1
    ports:
      - 8080:8080
    networks:
      app-network: # Подключение к той же сети
    environment:
      MONGODB_URL: "mongodb://mongos_router:27017" # Подключение через роутер на порту 27017
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_shard1:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data:
  shard1-replica1-data:
  shard1-replica2-data:
  shard1-replica3-data:
  shard2-data:
  shard2-replica1-data:
  shard2-replica2-data:
  shard2-replica3-data:
  redis_shard1-data:
  redis_shard2-data: